'use strict';

const isNonNullObject = require('../utils/validator').isNonNullObject;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystFilestoreError = require('../utils/error').CatalystFilestoreError;

class Folder extends CatalystAppInternals {
	constructor(folderDetails, fileInstance) {
		super(fileInstance);
		this._folderDetails = folderDetails;
		this.requester = fileInstance.requester;
	}

	update(folderDetails) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(folderDetails, 'folder_object', true);
			isNonEmptyString(folderDetails.folder_name, 'folder_name in folder_object', true);
		}, CatalystFilestoreError).then(() => {
			const postData = {
				folder_name: folderDetails.folder_name
			};
			const request = {
				method: 'PUT',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder/${this._folderDetails.id}`,
				data: postData,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	delete() {
		const request = {
			method: 'DELETE',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder/${this._folderDetails.id}`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			if (json.data) {
				return true;
			}
		});
	}

	getFileDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'file_id', true);
		}, CatalystFilestoreError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder/${this._folderDetails.id}/file/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	deleteFile(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'file_id', true);
		}, CatalystFilestoreError).then(() => {
			const request = {
				method: 'DELETE',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder/${this._folderDetails.id}/file/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				if (json.data) {
					return true;
				}
			});
		});
	}

	uploadFile(fileDetails) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(fileDetails, 'file_object', true);
			isNonEmptyString(fileDetails.name, 'name in file_object', true);
		}, CatalystFilestoreError).then(() => {
			let formData = new require('form-data')();
			formData.append('code', fileDetails.code);
			formData.append('file_name', fileDetails.name);
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder/${this._folderDetails.id}/file`,
				data: formData,
				type: 'file'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	downloadFile(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'file_id', true);
		}, CatalystFilestoreError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder/${this._folderDetails.id}/file/${id}/download`
			};
			return this.requester.send(request).then((resp) => {
				return resp.buffer;
			});
		});
	}

	toString() {
		return JSON.stringify(this._folderDetails);
	}

	toJSON() {
		return this._folderDetails;
	}
}
exports.Folder = Folder;
