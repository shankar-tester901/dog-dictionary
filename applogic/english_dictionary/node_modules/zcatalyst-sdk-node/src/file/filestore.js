'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const Folder = require('./folder').Folder;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystFilestoreError = require('../utils/error').CatalystFilestoreError;

class Filestore extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		this.requester = new AuthorizedHttpClient(this);
	}

	createFolder(name) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(name, 'folder_name', true);
		}, CatalystFilestoreError).then(() => {
			const postData = {
				folder_name: name
			};
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder`,
				data: postData,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return new Folder(json.data, this);
			});
		});
	}

	getAllFolders() {
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			var folder_arr = [];
			json.data.forEach((folder) => {
				folder_arr.push(new Folder(folder, this));
			});
			return folder_arr;
		});
	}

	getFolderDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'folder_id', true);
		}, CatalystFilestoreError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/folder/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return new Folder(json.data, this);
			});
		});
	}

	folder(id) {
		if (!isStringOrNumber(id)) {
			throw new CatalystFilestoreError(
				'invalid-argument',
				'Value provided for folder_id must be a non empty String or Number.'
			);
		}
		return new Folder({ id: id }, this);
	}
}
exports.Filestore = Filestore;
