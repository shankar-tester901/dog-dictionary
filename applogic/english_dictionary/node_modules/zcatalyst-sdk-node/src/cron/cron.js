'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const validate = require('./cronValidator').validate;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const API_VERSION = require('../utils/constants').API_VERSION;
const USER = require('../utils/constants').CREDENTIAL_USER;
const CatalystCronError = require('../utils/error').CatalystCronError;

class Cron extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	createCron(cron) {
		return validate(cron).then((validCronObj) => {
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/cron`,
				data: validCronObj,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				var json = resp.data;
				return json.data;
			});
		});
	}

	getAllCron() {
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/cron`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			return json.data;
		});
	}

	getCronDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'cron_id', true);
		}, CatalystCronError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/cron/${id}`
			};

			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	updateCron(cron) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(cron.id, 'id in cron', true);
		}, CatalystCronError).then(() => {
			return validate(cron).then((validCronObj) => {
				const request = {
					method: 'PUT',
					path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/cron/${cron.id}`,
					data: validCronObj,
					type: 'json'
				};
				return this.requester.send(request).then((resp) => {
					const json = resp.data;
					return json.data;
				});
			});
		});
	}

	deleteCron(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'cron_id', true);
		}, CatalystCronError).then(() => {
			const request = {
				method: 'DELETE',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/cron/${id}`
			};
			return this.requester.send(request).then(() => {
				return true;
			});
		});
	}
}
exports.Cron = Cron;
