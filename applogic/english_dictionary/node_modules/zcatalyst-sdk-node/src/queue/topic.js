'use strict';

const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const Consumer = require('./consumer').Consumer;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystQueueError = require('../utils/error').CatalystQueueError;

class Topic extends CatalystAppInternals {
	constructor(topicDetails, queueInstance) {
		super(queueInstance);
		this._topicDetails = topicDetails;
		this.requester = queueInstance.requester;
	}

	produce(value) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(value, 'queue_value', true);
		}, CatalystQueueError).then(() => {
			const postData = {
				value: value
			};
			const request = {
				method: 'POST',
				type: 'json',
				data: postData,
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/queue/${this._topicDetails.id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	consumer() {
		return new Consumer(this);
	}

	toString() {
		return JSON.stringify(this._topicDetails);
	}

	toJSON() {
		return this._topicDetails;
	}
}

exports.Topic = Topic;
