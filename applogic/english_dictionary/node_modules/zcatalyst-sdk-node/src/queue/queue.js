'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const Topic = require('./topic').Topic;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const USER = require('../utils/constants').CREDENTIAL_USER;
const CatalystQueueError = require('../utils/error').CatalystQueueError;

class Queue extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	getAllTopics() {
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/queue`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			var topics_arr = [];
			json.data.forEach((topic) => {
				topics_arr.push(new Topic(topic, this));
			});
			return topics_arr;
		});
	}

	getTopicDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'queue_id', true);
		}, CatalystQueueError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/queue/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return new Topic(json.data, this);
			});
		});
	}

	topic(id) {
		if (!isStringOrNumber(id)) {
			throw new CatalystQueueError(
				'invalid-argument',
				'Value provided for topic_id must be a non empty String or Number.'
			);
		}
		return new Topic({ id: id }, this);
	}
}
exports.Queue = Queue;
