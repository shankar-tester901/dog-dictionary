'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const isNonNullObject = require('../utils/validator').isNonNullObject;
const validateObject = require('../utils/validator').validateObject;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const USER = require('../utils/constants').CREDENTIAL_USER;
const CatalystUserManagementError = require('../utils/error').CatalystUserManagementError;

class UserManagement extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	getCurrentUser() {
		super.switchUser(USER.user);
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user/current`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			return json.data;
		});
	}

	getAllUsers() {
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			var user_arr = [];
			json.data.forEach((user) => {
				user_arr.push(user);
			});
			return user_arr;
		});
	}

	getUserDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'user_id', true);
		}, CatalystUserManagementError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	deleteUser(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'user_id', true);
		}, CatalystUserManagementError).then(() => {
			const request = {
				method: 'DELETE',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data ? true : false;
			});
		});
	}

	registerUser(signupConfig, userDetails) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(signupConfig, 'signupConfig', true);
			validateObject(signupConfig, ['platform_type', 'zaid'], 'signupConfig', true);
			isNonNullObject(userDetails, 'userDetails', true);
			validateObject(userDetails, ['last_name', 'email_id'], 'userDetails', true);
		}, CatalystUserManagementError).then(() => {
			signupConfig.user_details = userDetails;
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user/signup`,
				data: signupConfig,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	addUserToOrg(signupConfig, userDetails) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(signupConfig, 'signupConfig', true);
			validateObject(signupConfig, ['platform_type'], 'signupConfig', true);
			isNonNullObject(userDetails, 'userDetails', true);
			validateObject(userDetails, ['last_name', 'email_id', 'zaaid'], 'userDetails', true);
		}, CatalystUserManagementError).then(() => {
			signupConfig.user_details = userDetails;
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user`,
				data: signupConfig,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	resetPassword(signupConfig, userDetails) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(signupConfig, 'signupConfig', true);
			validateObject(signupConfig, ['platform_type', 'zaid'], 'signupConfig', true);
			isNonNullObject(userDetails, 'userDetails', true);
			validateObject(userDetails, ['email_id'], 'userDetails', true);
		}, CatalystUserManagementError).then(() => {
			signupConfig.user_details = userDetails;
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user/forgotpassword`,
				data: signupConfig,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}
}
exports.UserManagement = UserManagement;
