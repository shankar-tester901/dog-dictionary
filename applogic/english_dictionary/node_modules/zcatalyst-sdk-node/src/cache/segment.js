'use strict';

const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const CatalystCacheError = require('../utils/error').CatalystCacheError;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const API_VERSION = require('../utils/constants').API_VERSION;

class Segment extends CatalystAppInternals {
	constructor(segmentDetails, cacheInstance) {
		super(cacheInstance);
		this._segmentDetails = segmentDetails;
		this.requester = cacheInstance.requester;
	}

	put(key, value, expiry) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(value, 'cache_value', true);
			isNonEmptyString(key, 'cache_key', true);
		}, CatalystCacheError).then(() => {
			const apiUrl =
				`/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}` +
				(this._segmentDetails.id === 'default'
					? '/cache'
					: `/segment/${this._segmentDetails.id}/cache`);
			const postData = {
				cache_name: key,
				cache_value: value,
				expiry_in_hours: expiry ? expiry : null
			};

			const request = {
				method: 'POST',
				type: 'json',
				data: postData,
				path: apiUrl
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	update(key, value, expiry) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(value, 'cache_value', true);
			isNonEmptyString(key, 'cache_key', true);
		}, CatalystCacheError).then(() => {
			const apiUrl =
				`/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}` +
				(this._segmentDetails.id === 'default'
					? '/cache'
					: `/segment/${this._segmentDetails.id}/cache`);
			const postData = {
				cache_name: key,
				cache_value: value,
				expiry_in_hours: expiry ? expiry : null
			};

			const request = {
				method: 'PUT',
				type: 'json',
				data: postData,
				path: apiUrl
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	getValue(cache_name) {
		return this.get(cache_name).then((cacheObj) => {
			return cacheObj.cache_value;
		});
	}

	get(cache_name) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(cache_name, 'cache_key', true);
		}, CatalystCacheError).then(() => {
			const apiUrl =
				`/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}` +
				(this._segmentDetails.id === 'default'
					? '/cache'
					: `/segment/${this._segmentDetails.id}/cache`);
			let query = {
				cacheKey: cache_name
			};
			const request = {
				method: 'GET',
				path: apiUrl,
				qs: query
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	delete(cache_name) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(cache_name, 'cache_key', true);
		}, CatalystCacheError).then(() => {
			const apiUrl =
				`/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}` +
				(this._segmentDetails.id === 'default'
					? '/cache'
					: `/segment/${this._segmentDetails.id}/cache`);
			let query = {
				cacheKey: cache_name
			};
			const request = {
				method: 'DELETE',
				path: apiUrl,
				qs: query
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	toString() {
		return JSON.stringify(this._segmentDetails);
	}

	toJSON() {
		return this._segmentDetails;
	}
}
exports.Segment = Segment;
