'use strict';

const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const API_VERSION = require('../utils/constants').API_VERSION;
const USER = require('../utils/constants').CREDENTIAL_USER;
const Segment = require('./segment').Segment;
const isValidApp = require('../utils/validator').isValidApp;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const CatalystCacheError = require('../utils/error').CatalystCacheError;

class Cache extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	getAllSegment() {
		var request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/segment`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			var segments_arr = [];
			json.data.forEach((segment) => {
				segments_arr.push(new Segment(segment, this));
			});
			return segments_arr;
		});
	}

	getSegmentDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'segment_id', true);
		}, CatalystCacheError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/segment/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return new Segment(json.data, this);
			});
		});
	}

	segment(id) {
		const segmentId = typeof id !== 'undefined' ? id : 'default';
		if (!isStringOrNumber(segmentId)) {
			throw new CatalystCacheError(
				'invalid-argument',
				'Provided value segment_id must be a string or number'
			);
		}
		return new Segment({ id: segmentId }, this);
	}
}
exports.Cache = Cache;
