'use strict';

const connectorJson = require('./connectorValidator').getConnectorJson;
const Connector = require('./connector').Connector;

const isValidApp = require('../utils/validator').isValidApp;
const isNonNullObject = require('../utils/validator').isNonNullObject;
const validateObject = require('../utils/validator').validateObject;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const HttpClient = require('../utils/api-request').HttpClient;
const CatalystConnectorError = require('../utils/error').CatalystConnectorError;
const constants = require('../utils/constants');

class Connection extends CatalystAppInternals {
	constructor(app, propJson) {
		isValidApp(app, true);
		super(app.internal);
		super.switchUser(constants.CREDENTIAL_USER.admin);
		this.connectionJson = connectorJson(propJson);

		this.app = app;
		this.requester = new HttpClient(this);
	}

	getConnector(connectorName) {
		if (this.connectionJson === null) {
			throw new CatalystConnectorError(
				'invalid_input',
				'the input passed to connector must be a valid json object or a string path to json file'
			);
		}
		let connector = this.connectionJson[connectorName];
		isNonNullObject(connector, 'connector.' + connectorName, true);
		validateObject(
			connector,
			[
				constants.CLIENT_ID,
				constants.CLIENT_SECRET,
				constants.AUTH_URL,
				constants.REFRESH_URL
			],
			'connector.' + connectorName,
			true
		);
		return new Connector(
			Object.assign({ [constants.CONNECTOR_NAME]: connectorName }, connector),
			this
		);
	}
}
exports.Connection = Connection;
