'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isNonNullObject = require('../utils/validator').isNonNullObject;
const validateObject = require('../utils/validator').validateObject;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystSearchError = require('../utils/error').CatalystSearchError;

class Search extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		// super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	executeSearchQuery(searchQuery) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(searchQuery, 'search_object', true);
			validateObject(searchQuery, ['search', 'search_table_columns'], 'search_object', true);
		}, CatalystSearchError).then(() => {
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/search`,
				data: searchQuery,
				type: 'json'
			};

			return this.requester.send(request).then((resp) => {
				return resp.data.data;
			});
		});
	}
}
exports.Search = Search;
