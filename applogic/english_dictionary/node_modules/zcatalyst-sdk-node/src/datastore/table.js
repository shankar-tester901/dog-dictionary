'use strict';

const isNonNullObject = require('../utils/validator').isNonNullObject;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const isNonNullArray = require('../utils/validator').isNonNullArray;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystDatastoreError = require('../utils/error').CatalystDatastoreError;

class Table extends CatalystAppInternals {
	constructor(tableDetails, datastoreInstance) {
		super(datastoreInstance);
		this._tableDetails = tableDetails;
		this.requester = datastoreInstance.requester;
	}

	getColumnDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'column_id', true);
		}, CatalystDatastoreError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
					._tableDetails.table_id || this._tableDetails.table_name}/column/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	getAllColumns() {
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
				._tableDetails.table_id || this._tableDetails.table_name}/column`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			return json.data;
		});
	}

	insertRow(row) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(row, 'row', true);
		}, CatalystDatastoreError).then(() => {
			var rowArr = [];
			rowArr.push(row);
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
					._tableDetails.table_id || this._tableDetails.table_name}/row`,
				data: rowArr,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data[0];
			});
		});
	}

	insertRows(rowArr) {
		return wrapValidatorsWithPromise(() => {
			isNonNullArray(rowArr, 'rows', true);
		}, CatalystDatastoreError).then(() => {
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
					._tableDetails.table_id || this._tableDetails.table_name}/row`,
				data: rowArr,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	getAllRows() {
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
				._tableDetails.table_id || this._tableDetails.table_name}/row`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			return json.data;
		});
	}

	getRow(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'row_id', true);
		}, CatalystDatastoreError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
					._tableDetails.table_id || this._tableDetails.table_name}/row/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	deleteRow(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'row_id', true);
		}, CatalystDatastoreError).then(() => {
			const request = {
				method: 'DELETE',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
					._tableDetails.table_id || this._tableDetails.table_name}/row/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data ? true : false;
			});
		});
	}

	updateRow(row) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(row, 'row', true);
			isStringOrNumber(row.ROWID, 'ROWID in row', true);
		}, CatalystDatastoreError).then(() => {
			const request = {
				method: 'PUT',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
					._tableDetails.table_id || this._tableDetails.table_name}/row`,
				data: [row],
				type: 'json'
			};
			return this.requester.send(request, this).then((resp) => {
				const json = resp.data;
				return json.data[0];
			});
		});
	}

	updateRows(rows) {
		return wrapValidatorsWithPromise(() => {
			isNonNullArray(rows, 'row', true);
		}, CatalystDatastoreError).then(() => {
			const request = {
				method: 'PUT',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${this
					._tableDetails.table_id || this._tableDetails.table_name}/row`,
				data: rows,
				type: 'json'
			};
			return this.requester.send(request, this).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}

	toString() {
		return JSON.stringify(this._tableDetails);
	}

	toJSON() {
		return this._tableDetails;
	}
}
exports.Table = Table;
