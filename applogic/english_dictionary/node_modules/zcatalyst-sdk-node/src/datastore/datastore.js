'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const isNumber = require('../utils/validator').isNumber;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const Table = require('./table').Table;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystDatastoreError = require('../utils/error').CatalystDatastoreError;

class Datastore extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		this.requester = new AuthorizedHttpClient(this);
	}

	getAllTables() {
		const request = {
			method: 'GET',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table`
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			var table_arr = [];
			json.data.forEach((table) => {
				table_arr.push(new Table(table, this));
			});
			return table_arr;
		});
	}

	getTableDetails(id) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'table_id', true);
		}, CatalystDatastoreError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/table/${id}`
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return new Table(json.data, this);
			});
		});
	}

	table(id) {
		if (!isStringOrNumber(id)) {
			throw new CatalystDatastoreError(
				'invalid-argument',
				'Value provided for table_id/table_name must be a non empty String or Number.'
			);
		}
		if (isNumber(Number(id))) {
			return new Table({ table_id: id }, this);
		} else {
			return new Table({ table_name: id }, this);
		}
	}
}
exports.Datastore = Datastore;
