'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isNonNullObject = require('../utils/validator').isNonNullObject;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const validate = require('./emailValidator').validate;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const USER = require('../utils/constants').CREDENTIAL_USER;
const CatalystEmailError = require('../utils/error').CatalystEmailError;

class Email extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	sendMail(mailObj) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(mailObj, 'email_object', true);
		}, CatalystEmailError).then(() => {
			return validate(mailObj).then((validMailObj) => {
				const request = {
					method: 'POST',
					path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/email/send`,
					data: validMailObj,
					type: 'json'
				};
				return this.requester.send(request).then((resp) => {
					return resp.data.data;
				});
			});
		});
	}
}
exports.Email = Email;
