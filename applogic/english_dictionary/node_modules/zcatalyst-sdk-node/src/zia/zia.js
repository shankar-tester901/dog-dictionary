'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const CatalystZiaError = require('../utils/error').CatalystZiaError;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const USER = require('../utils/constants').CREDENTIAL_USER;
const FormData = require('form-data');

class Zia extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	detectObject(file) {
		let formData = new FormData();
		formData.append('image', file);
		const request = {
			method: 'POST',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/ml/detect-object`,
			data: formData,
			type: 'file'
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			return json.data;
		});
	}

	extractOpticalCharacters(file, languageCodes) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(languageCodes, 'language_codes', true);
		}, CatalystZiaError).then(() => {
			let formData = new FormData();
			formData.append('image', file);
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/ml/ocr`,
				data: formData,
				type: 'file'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data.text;
			});
		});
	}

	extractNamedEntity(file) {
		let formData = new FormData();
		if (isNonEmptyString(file)) {
			formData.append('text', file);
		} else {
			formData.append('text_file', file);
		}
		const request = {
			method: 'POST',
			path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/ml/ner`,
			data: formData,
			type: 'file'
		};
		return this.requester.send(request).then((resp) => {
			const json = resp.data;
			return json.data;
		});
	}
}

exports.Zia = Zia;
