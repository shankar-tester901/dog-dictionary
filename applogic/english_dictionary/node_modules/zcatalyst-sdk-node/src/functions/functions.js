'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isStringOrNumber = require('../utils/validator').isStringOrNumber;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystFunctionsError = require('../utils/error').CatalystFunctionsError;

class Functions extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app, true);
		super(app.internal);
		// super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	execute(id, { data = {} } = {}) {
		return wrapValidatorsWithPromise(() => {
			isStringOrNumber(id, 'function_id|functions_name', true);
		}, CatalystFunctionsError).then(() => {
			const request = {
				method: 'GET',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/function/${id}/execute`,
				qs: data
			};
			return this.requester.send(request).then((resp) => {
				return resp.data.data === undefined ? resp.data.output : resp.data.data;
			});
		});
	}
}
exports.Functions = Functions;
