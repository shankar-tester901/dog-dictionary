'use strict';

const isValidApp = require('../utils/validator').isValidApp;
const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystZCQLError = require('../utils/error').CatalystZCQLError;

class ZCQL extends CatalystAppInternals {
	constructor(app) {
		isValidApp(app);
		super(app.internal);
		// super.switchUser(USER.admin);
		this.requester = new AuthorizedHttpClient(this);
	}

	executeZCQLQuery(sql) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(sql, 'ZCQL/invalid-argument');
		}, CatalystZCQLError).then(() => {
			const postData = {
				query: sql
			};
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/query`,
				data: postData,
				type: 'json'
			};

			return this.requester.send(request).then((resp) => {
				return resp.data.data;
			});
		});
	}
}

exports.ZCQL = ZCQL;
