'use strict';

const isNonNullObject = require('../utils/validator').isNonNullObject;
const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const validateObject = require('../utils/validator').validateObject;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystPushNotificationError = require('../utils/error').CatalystPushNotificationError;

class MobileNotification extends CatalystAppInternals {
	constructor(id, notificationInstance) {
		super(notificationInstance);
		this._appId = id;
		this.requester = notificationInstance.requester;
	}

	sendNotification(notifyObj, recipient) {
		return wrapValidatorsWithPromise(() => {
			isNonNullObject(notifyObj, 'notification_object', true);
			isNonEmptyString(recipient, 'recipient', true);
			validateObject(notifyObj, ['message'], true);
		}, CatalystPushNotificationError).then(() => {
			let pushJson = {};
			pushJson.recipient = recipient;
			pushJson.push_details = notifyObj;
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/push-notification/${this._appId}/project-user/notify`,
				data: pushJson,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}
}
exports.MobileNotification = MobileNotification;
