'use strict';

const wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
const isNonEmptyString = require('../utils/validator').isNonEmptyString;
const isNonNullArray = require('../utils/validator').isNonNullArray;
const CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
const API_VERSION = require('../utils/constants').API_VERSION;
const PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
const CatalystPushNotificationError = require('../utils/error').CatalystPushNotificationError;

class WebNotification extends CatalystAppInternals {
	constructor(notificationInstance) {
		super(notificationInstance);
		this.requester = notificationInstance.requester;
	}

	sendNotification(message, recipients) {
		return wrapValidatorsWithPromise(() => {
			isNonEmptyString(message, 'message', true);
			isNonNullArray(recipients, 'recipients', true);
		}, CatalystPushNotificationError).then(() => {
			let pushJson = {};
			pushJson.recipents = recipients;
			pushJson.message = message;
			const request = {
				method: 'POST',
				path: `/${PRODUCT_NAME}/${API_VERSION}/project/${this.projectId}/project-user/notify`,
				data: pushJson,
				type: 'json'
			};
			return this.requester.send(request).then((resp) => {
				const json = resp.data;
				return json.data;
			});
		});
	}
}
exports.WebNotification = WebNotification;
